#!/usr/bin/env python3
#
# Copyright 2023 BobRos
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
import subprocess
import socket
import rclpy
from rclpy.node import Node
from std_msgs.msg import String
from rcl_interfaces.msg import ParameterType
from rcl_interfaces.msg import ParameterDescriptor
from threading import Thread

class MpvRosNode(Node):
    """MPV player ROS Node wrapper"""

    def __init__(self):
        """Start MPV player with given ROS params."""
        super().__init__('mpvros')
        self.running = True
        self.thread = None
        self.socket = None

        self.sub = self.create_subscription(String, 'ipc_in', 
            self.topic_callback, 10)
        self.pub = self.create_publisher(String, 'ipc_out', 10)

        self.declare_parameter('args', descriptor=ParameterDescriptor(
            type=ParameterType.PARAMETER_STRING_ARRAY))
        self.args = self.get_parameter(
            'args').get_parameter_value().string_array_value

        self.declare_parameter('ipc_server', '/tmp/mpvros.sock')
        self.ipc_server = self.get_parameter(
            'ipc_server').get_parameter_value().string_value
        
        self.cmd = ['mpv', '--input-ipc-server='+self.ipc_server]
        self.cmd  = [*self.cmd , *self.args]

        self.get_logger().info(str(self.cmd))
        self.process = subprocess.Popen(self.cmd)

        self.timer = self.create_timer(0.1, self.loop)

    def loop(self):
        """Finishes the node if MPVplayer ends."""
        if self.process.poll() != None:
            self.running = False
            if self.thread: self.thread.join()
            raise KeyboardInterrupt

    def ipc_init(self):
        """Connects to mpv ipc-server socket and starts ipc_read loop thread."""
        try:
            self.socket = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
            self.socket.connect(self.ipc_server)
            self.thread = Thread(target=self.ipc_read)
            self.thread.start()
        except Exception as e:
            self.get_logger().error('ipc_init: %s' % str(e))

    def ipc_read(self):
        """Receives ipc data from mpv ipc-server socket."""
        try:
            while self.running:
                data = self.socket.recv(4096).decode().split("\n")
                for line in data:
                    msg = String()
                    msg.data = line
                    self.topic_pub(msg)
            self.socket.close
            self.get_logger().info('IPC socket closed')
        except Exception as e:
            if type(e).__name__ != 'RCLError':           
                self.get_logger().error('ipc_read: %s' % str(e))

    def topic_callback(self, msg):
        "Receives incoming ipc topic data and "
        "sends it to mpv ipc-server socket."
        try:
            if not self.socket: self.ipc_init()
            self.socket.send((msg.data+"\n").encode())
        except Exception as e:
            self.get_logger().error('topic_callback: %s' % str(e))

    def topic_pub(self, msg):
        """Publishes given message. Logs content also to ROS debug logger."""
        if msg.data:
            self.get_logger().debug('topic_pub: %s' % msg.data)
            self.pub.publish(msg)
    

def main(args=None):
    try:
        rclpy.init(args=args)
        n = MpvRosNode()
        rclpy.spin(n)
    except KeyboardInterrupt:
        pass
    rclpy.shutdown()

if __name__ == '__main__':
    main()
