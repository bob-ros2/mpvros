#!/usr/bin/env python3
#
# Copyright 2023 BobRos
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
import os
import signal
import rclpy
import subprocess
from random import choice
from rclpy.node import Node
from std_msgs.msg import String
from rcl_interfaces.msg import ParameterDescriptor
from rclpy.action import ActionServer
from mpvros.action import Schedule

class SchedulerNode(Node):
    """Scheduler ROS Node for MpvRos."""  
    def __init__(self):
        super().__init__('scheduler')
        self.pids = []

        self.declare_parameter( 
            'screen', '', ParameterDescriptor(
            description='Default screen where to show MPV player.'))
        self.declare_parameter(
            'spawn_ns', '/scheduler/mpv_', ParameterDescriptor(
            description='Namespace where spawned MPV ROS nodes apear.'))
        
        self.spawn_ns = self.get_parameter(
            'spawn_ns').get_parameter_value().string_value
        self.screen = self.get_parameter(
            'screen').get_parameter_value().string_value

        self.sub = self.create_subscription(String, 'schedule', 
            self.schedule_callback, 10)

        self._action_server = ActionServer(
            self, Schedule, 'schedule', self.action_callback)
        
        self.timer = self.create_timer(0.1, self.maintain_pids)

    def pid_running(self, p):
        """Poll a PID and return if it is still running."""
        is_running = p['pid'].poll() is None
        if not is_running:
            p['pid'].terminate()
            self.get_logger().info("drop pid "+str(p['pid'].pid))
        return is_running

    def maintain_pids(self):
        """Check if a MPV ROS node despawns.
        Despawned PIDs are removed from the list."""
        self.pids = [p for p in self.pids if self.pid_running(p)]

    def terminate_id(self, id):
        for p in self.pids:
            if p['id'] == id:
                os.killpg(os.getpgid(p['pid'].pid), signal.SIGTERM)
                self.get_logger().info("terminate id "+id)
        self.maintain_pids()

    def schedule(self, args, id=None):
        """Schedule MPV ROS node with given args. If id is provided a 
        previously started process with same id will be terminated first 
        before starting the new one."""
        if not args.startswith("ros2"):
            # launch mpv together with title node?
            schedule_with_title = os.environ.get("SCHEDULER_TITLE", "true")
            # launch mpv with respawn flag?
            schedule_with_respawn = os.environ.get("SCHEDULER_RESPAWN", "false")
            if not id:
                id = ''.join(map(choice,["bcdfghjklmnpqrstvwxz","aeiouy"]*4))
            ipc = " ipc_server:=/tmp/mpvros-"+id+".sock"
            l = ','.join("\'{0}\'".format(w) for w in args.split())
            args = ' args:=[' + l + ']'
            title = ' title:='+schedule_with_title
            respawn = ' respawn:='+schedule_with_respawn
            ns = " ns:="+self.spawn_ns + id
            args = "ros2 launch mpvros mpv.launch.py" +ipc+args+ns+title+respawn
        self.get_logger().info(args)
        if id: self.terminate_id(id)
        args = args.split()
        p = subprocess.Popen(args, preexec_fn=os.setsid)#,start_new_session=True)
        d = { 'pid': p, 'args': args, 'id': id}
        if p: self.pids.append(d)
        return id

    def schedule_callback(self, msg):
        """Schedule MPV ROS node from topic."""
        self.schedule(msg.data)

    def action_callback(self, goal_handle : Schedule):
        """Schedule MPV ROS node from action."""
        feedback_msg = Schedule.Feedback()
        feedback_msg.state = "starting player ..."
        goal_handle.publish_feedback(feedback_msg)
        result = Schedule.Result()
        name = self.schedule(
            goal_handle.request.args,
            goal_handle.request.id)
        result.result = self.spawn_ns+str(name)
        goal_handle.succeed()
        return result


def main():
    try:
        rclpy.init(args=None)
        n = SchedulerNode()
        try:
            rclpy.spin(n)
        except Exception as e: 
            n.get_logger().error("Spin: %s", str(e))
        rclpy.shutdown()
    except KeyboardInterrupt:
        pass

if __name__ == '__main__':
    main()